/*** 'Editable' - you can edit the code below based on the needs ***/
import java.util.concurrent.Callable;
import android.util.Log;

print("Very first line of logic after the import lines");

User user; // don't touch
String userid;

makeLocalID(){
    fetchOne("CREATE TABLE IF NOT EXISTS localSettings (key text primary key, value text);");
    fetchOne("drop view latestNonDeletedArchEntFormattedIdentifiers;");
    fetchOne("CREATE VIEW latestNonDeletedArchEntFormattedIdentifiers as " +
              "select uuid, aenttypeid, aenttypename, group_concat(response, '') as response, null as deleted " +
              "from ( " +
                "select uuid, aenttypeid, aenttypename, group_concat(format(formatstring, vocabname, measure, freetext, certainty), appendcharacterstring) as response, null as deleted, aentcountorder " +
                "from ( " +
                  "select uuid, aenttypeid, aenttypename, formatstring, vocabname, measure, freetext, certainty, appendcharacterstring, null as deleted, aentcountorder, vocabcountorder, attributeid " +
                  "from latestNonDeletedArchent " +
                    "JOIN aenttype using (aenttypeid) " +
                    "JOIN (select * from idealaent where isIdentifier='true') using (aenttypeid) " +
                    "join attributekey  using (attributeid) " +
                    "join latestNonDeletedAentValue using (uuid, attributeid) " +
                    "left outer join vocabulary using (attributeid, vocabid) " +
                  "order by uuid, aentcountorder, vocabcountorder " +
                ") " +
                "group by uuid, attributeid " +
                "having response is not null " +
                "order by uuid, aentcountorder) " +
              "group by uuid " +
              "order by uuid;"
    );


}
makeLocalID();

/*** Uneditable - you can edit the code below with extreme precaution ***/
/*** USER ***/

loadUsers() {
    fetchAll("select userid, fname || ' ' || lname from user where userdeleted is null;", new FetchCallback() {
        onFetch(result) {
            populateList("user/usertab/users", result);
        }
    });
}

String username = "";
String device = "";

login() {
    fetchOne("select userid,fname,lname,email from user where userid='" + getListItemValue() + "';", new FetchCallback() {
        onFetch(result) {
            user = new User(result.get(0),result.get(1),result.get(2),result.get(3));
            setUser(user);
            username = result.get(1) + " " + result.get(2);
            showTabGroup("oldBone");
        }
    });
}

loadUsers();

onEvent("user/usertab/users", "click", "login()");

/*** SYNC ***/

startSync() {
    setSyncEnabled(true);
    setFileSyncEnabled(true);
}

stopSync() {
    setSyncEnabled(false);
    setFileSyncEnabled(false);
}

/** Vocab Population **/
/* Populates the path specified vocabulary from the database based on the given attribute name, where type 
is the type of the vocab to populate (checkbox, dropdown, radio or list). */
makeVocab(String type, String path, String attrib, List vocabExclusions){
  fetchAll("select vocabid, vocabname from vocabulary join attributekey using (attributeid) where attributename = '" + attrib + "' order by vocabcountorder;",
    new FetchCallback() {
      onFetch(result) {
        print("makeVocab() result: " + result);
        if (result!=null && result.size()>0 && vocabExclusions!=null && vocabExclusions.size()>0) {
          List filteredVocab = new ArrayList();
          for(item : result) {
            if (vocabExclusions.contains(item.get(1))) {
              Log.d("makeVocab()", "removing vocab exclusion: " + item.get(1));
            } else {
              filteredVocab.add(item);
            }
          }
          result=filteredVocab;
        }
        print("makeVocab() filtered result: " + result);
        if(type.equals("CheckBoxGroup")) {
          populateCheckBoxGroup(path, result);
        } else if(type.equals("DropDown")) {
          populateDropDown(path, result);
        } else if(type.equals("RadioGroup")) {
          populateRadioGroup(path, result);
        } else if(type.equals("List")) {
          populateList(path, result);
        }
      }
    });
}

/** Wrapper for to make a vocab without an exlusion list **/
makeVocab(String type, String path, String attrib) {
  makeVocab(type, path, attrib, null);
}

/** Makes a dynamic vocab and populates it using a data_schema vocab. **/
makeDynamicVocab(String type, String path, String attrib, String label) {
  viewDef = createViewDef();
  if (type.equals("CheckBoxGroup")) {
    viewDef.createCheckboxGroup();
  } else {
    return;
  }
  
  if (!isNull(label)) {
    viewDef.setLabel(label);
  }

  fetchAll("select vocabid, vocabname from vocabulary join attributekey using (attributeid) where attributename = '" + attrib + "' order by vocabcountorder;", new FetchCallback() {
    onFetch(result) {
      print ("Dynamic Vocab: " + result);
      for (item : result) {
        viewDef.addChoice(item.get(1), item.get(0));
      }
      createView(path, viewDef);
    }
  });
}


/**************************/
/** Editable Module Code **/
/**************************/

/** Populates the checkboxes, lists, ... for the Old Bone tabgroup using the vocabularies. **/
populateOldBoneAttributes() {
  makeVocab("RadioGroup", "oldBone/basicIdentification/cluster", "Cluster");
  makeVocab("RadioGroup", "oldBone/basicIdentification/clusterType", "Cluster Type");
  makeVocab("CheckBoxGroup", "oldBone/insituAndSurfaceBone/bodyPartsIdentified", "Body Parts Identifed");
  makeVocab("CheckBoxGroup", "oldBone/insituAndSurfaceBone/taxonIdentified", "Taxon Identified");
  makeVocab("CheckBoxGroup", "oldBone/insituAndSurfaceBone/bonePreservation", "Bone Preservation");
  makeVocab("CheckBoxGroup", "oldBone/insituAndSurfaceBone/deliberateSurfaceModification", "Deliberate Surface Modification");
  fetchAll("select vocabid, vocabname, pictureurl from vocabulary left join attributekey using (attributeid) where attributename = 'Topographic Setting';", new FetchCallback() {
    onFetch(pictures) {
      populatePictureGallery("oldBone/topAndStratSetting/topographicSetting", pictures);
    }
  });
  fetchAll("select vocabid, vocabname, pictureurl from vocabulary left join attributekey using (attributeid) where attributename = 'Sediment Type';", new FetchCallback() {
    onFetch(pictures) {
      populatePictureGallery("oldBone/topAndStratSetting/sedimentType", pictures);
    }
  });
  fetchAll("select vocabid, vocabname, pictureurl from vocabulary left join attributekey using (attributeid) where attributename = 'Vulnerability To Erosion';", new FetchCallback() {
    onFetch(pictures) {
      populatePictureGallery("oldBone/topAndStratSetting/vulnerabilityToErosion", pictures);
    }
  });
  fetchAll("select vocabid, vocabname, pictureurl from vocabulary left join attributekey using (attributeid) where attributename = 'Palaeotopographic Setting';", new FetchCallback() {
    onFetch(pictures) {
      populatePictureGallery("oldBone/topAndStratSetting/paleotopographicSetting", pictures);
    }
  });
}

/** Displays or hides the associated materials tabgroup depending on what cluster is selected. **/
toggleAssociatedMaterials() {
  String boneAndOther = null;
  fetchOne("select vocabid from vocabulary join attributekey using (attributeid) where attributename = 'Cluster' and vocabname = '{boneOnly}';", new FetchCallback() {
    onFetch(result) {
      if (!isNull(result)) {
        boneOnly = result.get(0);
        if (boneOnly.equals(getFieldValue("oldBone/basicIdentification/cluster"))) {
          Log.d("showAssociatedMaterials()", "Hiding associated materials Tab");
          cancelTab("oldBone/associatedMaterials", false);
          toggleClusterType(true);        
        } else {
          Log.d("showAssociatedMaterials()", "Showing associated materials Tab");
          showTab("oldBone/associatedMaterials");
          showTab("oldBone/basicIdentification");
          toggleClusterType(false);
        }
      }
    }
  });
}

/** Hides the irrelevant cluster types depending on the cluster chosen. **/
toggleClusterType(Boolean boneOnly) {
  List exclusions = new ArrayList();
  if (boneOnly) {
    exclusions.add("{inistAndOth}");
    exclusions.add("{surfAndOth}");
    exclusions.add("{bothAndOth}");
  } else {
    exclusions.add("{insitBO}");
    exclusions.add("{surfBO}");
    exclusions.add("{insitAndSurf}");
  }
  makeVocab("RadioGroup", "oldBone/basicIdentification/clusterType", "Cluster Type", exclusions);
}

onEvent("oldBone/basicIdentification/cluster", "click", "toggleAssociatedMaterials();");

onEvent("oldBone/associatedMaterials/addInsituMaterial", "click", "newAssocMaterial(true);");
onEvent("oldBone/associatedMaterials/addSurfaceMaterial", "click", "newAssocMaterial(false);");

/* Sets up the UI to allow the selected associated material to be recorded */
newAssocMaterial(Boolean insituMaterial) {
  String selectedAssocMaterial = null;
  if (insituMaterial) {
    selectedAssocMaterial = getFieldValue("oldBone/associatedMaterials/associatedInsituMaterial");
  } else {
    selectedAssocMaterial = getFieldValue("oldBone/associatedMaterials/associatedSurfaceMaterial");
  }
  // load the assoc material tabgroup and hide the irrelevant tabs
  if (selectedAssocMaterial == null) {
    Log.d("newAssocMaterial()", "Error: no material type selected");
  } else {
    Log.d("newAssocMaterial()", "Selected assoc material: " + selectedAssocMaterial);
    newTabGroup("associatedMaterials");
    // showTab("oldBone/associatedMaterials");
    // onEvent("associatedMaterials", "show", "swapAssociatedMaterials(\""+selectedAssocMaterial+"\");");
    swapAssociatedMaterials(selectedAssocMaterial);
  }
}

/* Hides and displays the tab of the selected associated material. */
swapAssociatedMaterials(String selectedAssocMaterial) {
  showToast("removing all dynamic views for associatedMaterials tabgroup");
  removeAllViewsAndContainers("associatedMaterials");
  if (selectedAssocMaterial.equals("eggshell")) {
    populateAssocMaterialAttributes("eggshell");
    // cancelTab("associatedMaterials/hearthMaterial", false);
    // cancelTab("associatedMaterials/stoneArtefact", false);
    // cancelTab("associatedMaterials/otherWorked", false);
    // showTab("associatedMaterials/eggshell");
  } else if (selectedAssocMaterial.equals("hs")) {
    populateAssocMaterialAttributes("hs");
    // cancelTab("associatedMaterials/eggshell", false);
    // cancelTab("associatedMaterials/stoneArtefact", false);
    // cancelTab("associatedMaterials/otherWorked", false);
    // showTab("associatedMaterials/hearthMaterial");
  } else if (selectedAssocMaterial.equals("artefacts")) {
    populateAssocMaterialAttributes("artefacts");
    // cancelTab("associatedMaterials/eggshell", false);
    // cancelTab("associatedMaterials/hearthMaterial", false);
    // cancelTab("associatedMaterials/otherWorked", false);
    // showTab("associatedMaterials/stoneArtefact");
  } else if (selectedAssocMaterial.equals("otherwork")) {
    populateAssocMaterialAttributes("otherwork");
    // cancelTab("associatedMaterials/eggshell", false);
    // cancelTab("associatedMaterials/hearthMaterial", false);
    // cancelTab("associatedMaterials/stoneArtefact", false);
    // showTab("associatedMaterials/otherWorked");   
  }
}

/** Populates the checkboxes, lists, ... for the Associated Materials tabgroup using the vocabularies. **/
populateAssocMaterialAttributes(String selectedAssocMaterial) {
  // makeVocab("CheckBoxGroup", "associatedMaterials/eggshell/associatedEggshell", "Associated Eggshell");
  // makeVocab("CheckBoxGroup", "associatedMaterials/hearthMaterial/associatedHearthMaterial", "Associated Hearth Material");
  // makeVocab("CheckBoxGroup", "associatedMaterials/stoneArtefact/associatedStoneArtefacts", "Associated Stone Artefacts");
  // makeVocab("CheckBoxGroup", "associatedMaterials/stoneArtefact/rawMaterialTypesPresent", "Raw Material Types Present");
  // makeVocab("CheckBoxGroup", "associatedMaterials/otherWorked/associatedOtherWorked", "Associated Other Worked Material");
  executeViewTask(new ViewTask() {
    doTask() {
      if (selectedAssocMaterial.equals("eggshell")) {
        showToast("Populating dynamic eggshell vocab");
        makeDynamicVocab("CheckBoxGroup", "associatedMaterials/eggshell/associatedEggshell", "Associated Eggshell", "{associatedEggshell}");
      } else if (selectedAssocMaterial.equals("hs")) {
        showToast("Populating dynamic hs vocab");
        makeDynamicVocab("CheckBoxGroup", "associatedMaterials/hearthMaterial/associatedHearthMaterial", "Associated Hearth Material", "{associatedHearthMaterial}");
      } else if (selectedAssocMaterial.equals("artefacts")) {
        showToast("Populating dynamic artefacts vocab");
        makeDynamicVocab("CheckBoxGroup", "associatedMaterials/stoneArtefact/associatedStoneArtefacts", "Associated Stone Artefacts", "{associatedStoneArtefacts}");
        makeDynamicVocab("CheckBoxGroup", "associatedMaterials/stoneArtefact/rawMaterialTypesPresent", "Raw Material Types Present", "{rawMaterialTypesPresent}");
        onEvent("associatedMaterials/stoneArtefact/associatedStoneArtefacts", "click", "updateDynamicAssociatedStone();");
      } else if (selectedAssocMaterial.equals("otherwork")) {
        showToast("Populating dynamic otherwork vocab");
        makeDynamicVocab("CheckBoxGroup", "associatedMaterials/otherWorked/associatedOtherWorked", "Associated Other Worked Material", "{associatedOtherWorked}");
      }
    }
  });
}

updateDynamicAssociatedStone() {
  showToast("update the dynamic stone views");
}

/** Module Initialisation **/
init() {
  // old bone init
  populateOldBoneAttributes();
  fetchOne("select vocabid from vocabulary join attributekey using (attributeid) where attributename = 'Cluster' and vocabname = '{boneOnly}';", new FetchCallback() {
    onFetch(result) {
      setFieldValue("oldBone/basicIdentification/cluster", result.get(0)); // set the cluster field to be 'Bone Only'
      toggleAssociatedMaterials();
    }
  });
  onEvent("oldBone", "load", "cancelTab(\"oldBone/associatedMaterials\", false);");

  // assoc materials init
  assocMaterials = new ArrayList();
  assocMaterials.add(new NameValuePair("{none}", "none"));
  assocMaterials.add(new NameValuePair("{mussel}", "mussel"));
  assocMaterials.add(new NameValuePair("{hs}", "hs"));
  assocMaterials.add(new NameValuePair("{eggshell}", "eggshell"));
  assocMaterials.add(new NameValuePair("{artefacts}", "artefacts"));
  assocMaterials.add(new NameValuePair("{otherwork}", "otherwork"));
  populateDropDown("oldBone/associatedMaterials/associatedInsituMaterial", assocMaterials);
  populateDropDown("oldBone/associatedMaterials/associatedSurfaceMaterial", assocMaterials);
}

init();