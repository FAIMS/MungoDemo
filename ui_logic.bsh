/*** 'Editable' - you can edit the code below based on the needs ***/
import java.util.concurrent.Callable;
import android.util.Log;
// imports to allow querying of the grid db
import java.io.File;
import jsqlite;
import jsqlite.Callback;

print("Very first line of logic after the import lines");

User user; // don't touch
String userid;

makeLocalID(){
    fetchOne("CREATE TABLE IF NOT EXISTS localSettings (key text primary key, value text);");
    // fetchOne("ATTACH DATABASE 'faims/modules/"+getModuleId()+"/files/data/grid.sqlite3' AS grid"); 
}
makeLocalID();

/*** Uneditable - you can edit the code below with extreme precaution ***/
/*** USER ***/

loadUsers() {
    fetchAll("select userid, fname || ' ' || lname from user where userdeleted is null;", new FetchCallback() {
        onFetch(result) {
            populateList("user/usertab/users", result);
        }
    });
}

String username = "";
String device = "";

login() {
    fetchOne("select userid,fname,lname,email from user where userid='" + getListItemValue() + "';", new FetchCallback() {
        onFetch(result) {
            user = new User(result.get(0),result.get(1),result.get(2),result.get(3));
            setUser(user);
            username = result.get(1) + " " + result.get(2);
            showTabGroup("control");
        }
    });
}

loadUsers();

onEvent("user/usertab/users", "click", "login()");

/*** SYNC ***/

startSync() {
    setSyncEnabled(true);
    setFileSyncEnabled(true);
}

stopSync() {
    setSyncEnabled(false);
    setFileSyncEnabled(false);
}

/** Vocab Population **/
/* Populates the path specified vocabulary from the database based on the given attribute name, where type 
is the type of the vocab to populate (checkbox, dropdown, radio or list). */
makeVocab(String type, String path, String attrib, List vocabExclusions) {
    makeVocab(type, path, attrib, vocabExclusions, null);
}

/* Populates the path specified vocabulary from the database based on the given attribute name, where type 
is the type of the vocab to populate (checkbox, dropdown, radio or list). */
makeVocab(String type, String path, String attrib, List vocabExclusions, String callbackFunction){
  fetchAll("select vocabid, vocabname from vocabulary join attributekey using (attributeid) where attributename = '" + attrib + "' order by vocabcountorder;",
    new FetchCallback() {
      onFetch(result) {
        print("makeVocab() result: " + result);
        if (result!=null && result.size()>0 && vocabExclusions!=null && vocabExclusions.size()>0) {
          List filteredVocab = new ArrayList();
          for(item : result) {
            if (vocabExclusions.contains(item.get(1))) {
              Log.d("makeVocab()", "removing vocab exclusion: " + item.get(1));
            } else {
              filteredVocab.add(item);
            }
          }
          result=filteredVocab;
        }
        print("makeVocab() filtered result: " + result);
        if(type.equals("CheckBoxGroup")) {
          populateCheckBoxGroup(path, result);
        } else if(type.equals("DropDown")) {
          populateDropDown(path, result);
        } else if(type.equals("RadioGroup")) {
          populateRadioGroup(path, result);
        } else if(type.equals("List")) {
          populateList(path, result);
        }

        if (callbackFunction != null && !isNull(callbackFunction)) {
          execute(callbackFunction);
        }
      }
    });
}

/** Wrapper for to make a vocab without an exlusion list **/
makeVocab(String type, String path, String attrib) {
  makeVocab(type, path, attrib, null);
}

/** Makes a dynamic vocab nested in the specified and populates it using a data_schema vocab, with a callbackFunction to execute after creating the dynamic view. **/
makeDynamicVocab(String type, String path, String attrib, String label, String callbackFunction, String container, String attributeName, String attributeType) {
  viewDef = createViewDef();
  if (type.equals("CheckBoxGroup")) {
    viewDef.createCheckboxGroup();
  } else if (type.equals("RadioGroup")) {
    viewDef.createRadioGroup();
  } else if (type.equals("PictureGallery")) {
    viewDef.createPictureGallery();
  } else {
    Log.e("makeDynamicVocab()", "Error: invalid vocab type provided.");
    return;
  }
  
  // set the label for the dynamic view
  if (!isNull(label)) {
    viewDef.setLabel(label);
  }

  // link the dynamic view to a property in the data schema
  if (!isNull(attributeName) && !isNull(attributeType)) {
    viewDef.setAttributeName(attributeName).setAttributeType(attributeType);
  }

  // Add the certainty, annotation and description
  viewDef.setAnnotationEnabled(true).setCertaintyEnabled(true).setInfoEnabled(true);

  // populate the dynamic view choices with the contents of some vocabulary
  String tabgroup = path.split("/")[0];
  String tab = path.split("/")[1];
  String view = path.split("/")[2];
  fetchAll("select vocabid, vocabname from vocabulary join attributekey using (attributeid) where attributename = '" + attrib + "' order by vocabcountorder;", new FetchCallback() {
    onFetch(result) {
      print ("Dynamic Vocab: " + result);
      for (item : result) {
        viewDef.addChoice(item.get(1), item.get(0));
      }
      if (!isNull(container)) {
        Log.d("makeDynamicVocab()", "Creating dynamic view '" + view + "' in container '" + container + "'");
        createView(path, viewDef, container);
      } else {
        Log.d("makeDynamicVocab()", "Creating dynamic view '" + view + "' in tab '" + tabgroup + "/" + tab + "'");
        createView(path, viewDef);
      }
      if (callbackFunction != null && !isNull(callbackFunction)) {
        execute(callbackFunction);
      }
    }
  });
  Log.d("makeDynamicVocab()", "Refreshing CSS for tabgroup: " + tabgroup);
  refreshTabgroupCSS(tabgroup);
}

/** Makes a dynamic vocab and populates it using a data_schema vocab. **/
makeDynamicVocab(String type, String path, String attrib, String label, String callbackFunction, String container) {
  makeDynamicVocab(type, path, attrib, label, callbackFunction, container, null, null);
}

makeDynamicVocab(String type, String path, String attrib, String label, String callbackFunction) {
  makeDynamicVocab(type, path, attrib, label, callbackFunction, null);
}

makeDynamicVocab(String type, String path, String attrib, String label) {
  makeDynamicVocab(type, path, attrib, label, null, null);
}


/** Saves two entity id's as a relation. **/
saveEntitiesToRel(String type, String entity1, String entity2) {
    if (isNull(entity1) || isNull(entity2)) return;
    saveRel(null, type, null, null, new SaveCallback() {
        onSave(rel_id, newRecord) {
            addReln(entity1, rel_id, null);
            addReln(entity2, rel_id, null);
        }
    });
}

/** Saves two entity id's as a relation. **/
saveEntitiesToRel(String type, String entity1, String entity2, String callback) {
    if (isNull(entity1) || isNull(entity2)) return;
    saveRel(null, type, null, null, new SaveCallback() {
        onSave(rel_id, newRecord) {
            addReln(entity1, rel_id, null);
            addReln(entity2, rel_id, null);
            if(!isNull(callback)) {
               execute(callback);
            }
        }
    });
}

/** Saves two entity id's as a relation. **/
saveEntitiesToHierRel(String type, String entity1, String entity2, String e1verb, String e2verb) {
    if (isNull(entity1) || isNull(entity2)) return;
    saveRel(null, type, null, null, new SaveCallback() {
        onSave(rel_id, newRecord) {
            addReln(entity1, rel_id, e1verb);
            addReln(entity2, rel_id, e2verb);
        }
    });
}

/**************************/
/** Editable Module Code **/
/**************************/

/** Action Bar **/

addActionBarItem("sync", new ToggleActionButtonCallback() {
    actionOnLabel() {
        "{Sync_Enabled}";
    }
    actionOn() {
        setSyncEnabled(false);
        setFileSyncEnabled(false);
        showToast("{Sync_Disabled}");
    }
    isActionOff() {
        isSyncEnabled();
    }
    actionOffLabel() {
        "{Sync_Disabled}";
    }
    actionOff() {
        setSyncEnabled(true);
        setFileSyncEnabled(true);
        showToast("{Sync_Enabled}");
    }
});

addActionBarItem("internal_gps", new ToggleActionButtonCallback() {
    actionOnLabel() {
        "{Internal_GPS_Enabled}";
    }
    actionOn() {
        stopGPS();
        showToast("{GPS_Disabled}");
    }
    isActionOff() {
        isInternalGPSOn();
    }
    actionOffLabel() {
        "{Internal_GPS_Disabled}";
    }
    actionOff() {
        if(isExternalGPSOn()) {
            stopGPS();
        }
        startInternalGPS();
        showToast("{GPS_Enabled}");
    }
});

addActionBarItem("external_gps", new ToggleActionButtonCallback() {
    actionOnLabel() {
        "{External_GPS_Enabled}";
    }
    actionOn() {
        stopGPS();
        showToast("{GPS_Disabled}");

    }
    isActionOff() {
        isExternalGPSOn();
    }
    actionOffLabel() {
        "{External_GPS_Disabled}";
    }
    actionOff() {
        if(isInternalGPSOn()) {
            stopGPS();
        }
        startExternalGPS();
        if(isBluetoothConnected()) {
            showToast("{GPS_Enabled}");
        } else {
            showToast("{Please_Enable_Bluetooth}");
            this.isActionOff();
        }
    }
});

String entity_id = null;

/** Saves the old bone entity. **/
saveOldBone() {
  Boolean enable_autosave = true;
  saveTabGroup("oldBone", entity_id, null, null, new SaveCallback() {
    onSave(uuid, newRecord) {
      entity_id = uuid;
      Log.d("saveOldBone()", "Old Bone record saved with id: " + entity_id);
      if (newRecord) {
        Log.d("saveOldBone", "New record created");
      }
    }
    onError(message) {
        showToast(message);
    }  
  }, enable_autosave);
}

onEvent("oldBone", "show", "saveOldBone();");
onEvent("control/control/newEntity", "delayclick", "newFeature();");

/* Loads a list view of existing entities. */
loadSearch() {
  String type = getFieldValue("control/search/entityTypes");
  populateCursorList("control/search/entityList", "select uuid, response from latestNonDeletedArchEntFormattedIdentifiers where aenttypename like '%" + type + "%' limit ? offset ?;", 25);
}
onEvent("control/search/entityTypes", "click", "loadSearch();");
onEvent("control/search", "show", "loadSearch();");
onEvent("control/search/entityList", "click", "loadFeature();");

/** Creates a record for the selected feature type. **/
newFeature() {
  String type = getFieldValue("control/control/entityTypes");
  if (type.equals("Old Bone Feature")) {
    newOldBone();
  }
}

loadFeature() {
  String entityID = getListItemValue();
  if (!isNull(entityID)) {
    fetchAll("select aenttypename from latestnondeletedarchent join aenttype using (aenttypeid) where uuid = '" + entityID + "';", new FetchCallback() {
      onFetch(result) {
        entity_id = entityID;
        Log.d("loadFeature()", "Loading entity id: " + entityID);
        if (result.get(0).get(0).equals("Old Bone Feature")) {
          loadOldBone();
        }
      }
    });
  } else {
    Log.e("loadFeature()", "Error: cannot load an entity with a null ID.");
  }
}

/** Creates a new old bone record. **/
newOldBone() {
  dialog = showBusy("creating a new record", "please wait");
  newTabGroup("oldBone");
  fetchOne("select vocabid from vocabulary join attributekey using (attributeid) where attributename = 'Cluster' and vocabname = '{boneOnly}';", new FetchCallback() {
    onFetch(result) {
      setFieldValue("oldBone/basicIdentification/cluster", result.get(0)); // set the cluster field to be 'Bone Only'
      toggleAssociatedMaterials();
      entity_id = null;
      setFieldValue("oldBone/basicIdentification/idNumber", "0");
      setFieldValue("oldBone/basicIdentification/gridSquare", "0");
      keepTabGroupChanges("oldBone");
      saveOldBone();
      dialog.dismiss();
    }
  });
}

/** Loads an old bone record. **/
loadOldBone() {
  if (isNull(entity_id)) {
    showToast("No entity selected");
      return;
  }
  dialog = showBusy("loading record", "please wait");
  showTabGroup("oldBone", entity_id, new FetchCallback() {
    onFetch(result) {
      // toggleAssociatedMaterials();
      Log.d("loadOldBone()", "Loaded an Old Bone Feature, ID: " + entity_id);
      showToast("Loaded an Old Bone record");
      keepTabGroupChanges("oldBone");
      dialog.dismiss();
    }
  });
}

/** Populates the checkboxes, lists, ... for the Old Bone tabgroup using the vocabularies. **/
populateOldBoneAttributes() {
  makeVocab("RadioGroup", "oldBone/basicIdentification/cluster", "Cluster");
  makeVocab("RadioGroup", "oldBone/basicIdentification/clusterType", "Cluster Type");
  makeVocab("CheckBoxGroup", "oldBone/insituAndSurfaceBone/bodyPartsIdentified", "Body Parts Identifed");
  makeVocab("CheckBoxGroup", "oldBone/insituAndSurfaceBone/taxonIdentified", "Taxon Identified");
  makeVocab("CheckBoxGroup", "oldBone/insituAndSurfaceBone/bonePreservation", "Bone Preservation");
  makeVocab("CheckBoxGroup", "oldBone/insituAndSurfaceBone/deliberateSurfaceModification", "Deliberate Surface Modification");

  fetchAll("select vocabid, vocabname, pictureurl from vocabulary left join attributekey using (attributeid) where attributename = 'Topographic Setting' order by vocabcountorder;", new FetchCallback() {
    onFetch(pictures) {
      populatePictureGallery("oldBone/topAndStratSetting/topographicSetting", pictures);
    }
  });
  fetchAll("select vocabid, vocabname, pictureurl from vocabulary left join attributekey using (attributeid) where attributename = 'Sediment Type' order by vocabcountorder;", new FetchCallback() {
    onFetch(pictures) {
      populatePictureGallery("oldBone/topAndStratSetting/sedimentType", pictures);
    }
  });
  fetchAll("select vocabid, vocabname, pictureurl from vocabulary left join attributekey using (attributeid) where attributename = 'Stratigraphic Unit' order by vocabcountorder;", new FetchCallback() {
    onFetch(pictures) {
      populatePictureGallery("oldBone/topAndStratSetting/stratigraphicUnit", pictures);
    }
  });
  fetchAll("select vocabid, vocabname, pictureurl from vocabulary left join attributekey using (attributeid) where attributename = 'Vulnerability To Erosion' order by vocabcountorder;", new FetchCallback() {
    onFetch(pictures) {
      populatePictureGallery("oldBone/topAndStratSetting/vulnerabilityToErosion", pictures);
    }
  });
  fetchAll("select vocabid, vocabname, pictureurl from vocabulary left join attributekey using (attributeid) where attributename = 'Palaeotopographic Setting' order by vocabcountorder;", new FetchCallback() {
    onFetch(pictures) {
      populatePictureGallery("oldBone/topAndStratSetting/paleotopographicSetting", pictures);
    }
  });
}

/** Displays or hides the associated materials tabgroup depending on what cluster is selected. **/
toggleAssociatedMaterials() {
  String boneAndOther = null;
  fetchOne("select vocabid from vocabulary join attributekey using (attributeid) where attributename = 'Cluster' and vocabname = '{boneOnly}';", new FetchCallback() {
    onFetch(result) {
      if (!isNull(result)) {
        boneOnly = result.get(0);
        if (boneOnly.equals(getFieldValue("oldBone/basicIdentification/cluster"))) {
          Log.d("toggleAssociatedMaterials()", "Hiding associated materials Tab");
          cancelTab("oldBone/associatedMaterials", false);
          toggleClusterType(true);        
        } else {
          Log.d("toggleAssociatedMaterials()", "Showing associated materials Tab");
          showTab("oldBone/associatedMaterials");
          showTab("oldBone/basicIdentification");
          toggleClusterType(false);
        }
      } else {
        Log.e("toggleAssociatedMaterials()", "No vocab found for cluster with choice bone only.");
      }
    }
  });
}

List cluserTypeVocab = new ArrayList();

/** Hides the irrelevant cluster types depending on the cluster chosen. **/
toggleClusterType(Boolean boneOnly) {
  List exclusions = new ArrayList();
  if (boneOnly) {
    exclusions.add("{inistAndOth}");
    exclusions.add("{surfAndOth}");
    exclusions.add("{bothAndOth}");
  } else {
    exclusions.add("{insitBO}");
    exclusions.add("{surfBO}");
    exclusions.add("{insitAndSurf}");
  }
  makeVocab("RadioGroup", "oldBone/basicIdentification/clusterType", "Cluster Type", exclusions);
  // load the value of a saved cluster type if one exists for the view (neccessary since the make vocab clears out the existing value)
  fetchOne("select vocabid from latestnondeletedaentvalue join attributekey using (attributeid) where uuid = \""+entity_id+"\" and attributename = 'Cluster Type';", new FetchCallback() {
    onFetch(result) {
      if (!isNull(result)) {
        String clusterType = result.get(0);
        Log.d("toggleClusterType()", "Setting clusterType field value to: " + clusterType);
        setFieldValue("oldBone/basicIdentification/clusterType", clusterType);
        updateInsituProportion();
      } else {
        Log.d("toggleClusterType()", "No saved value for clusterType found");
      }
    }
  });
}

onEvent("oldBone/basicIdentification/cluster", "click", "toggleAssociatedMaterials();");

onEvent("oldBone/basicIdentification/clusterType", "click", "updateInsituProportion()");

inSituPictureCallback() {
 fetchAll("select vocabid, vocabname, pictureurl from vocabulary left join attributekey using (attributeid) where attributename = 'Insitu Proportion' order by vocabcountorder;", new FetchCallback() {
    onFetch(pictures) {
      populatePictureGallery("oldBone/insituAndSurfaceBone/insituProportion", pictures);
      refreshTabgroupCSS("oldBone");
    }
  }); 
}

/** Displays the in situ proportion view when appropriate. **/
updateInsituProportion() {
  // clusterType = getFieldValue("oldBone/basicIdentification/clusterType");
  selectedItem = getFieldValue("oldBone/basicIdentification/clusterType");
  if (selectedItem == null) {
    Log.e("updateInsituProportion()", "Null field value for: \"oldBone/basicIdentification/clusterType\"");
    return;
  }
  Boolean removeInsituProportion = true;
  // for (selectedItem : clusterType) {
    for (type : cluserTypeVocab) {
      // if (selectedItem.getName().equals(type.get(0))) {
      if (selectedItem.equals(type.get(0))) {
        executeViewTask(new ViewTask() {
          doTask() {
            if (type.get(1).equals("{insitBO}") || type.get(1).equals("{insitAndSurf}") || type.get(1).equals("{inistAndOth}") || type.get(1).equals("{bothAndOth}")) {
              if (!hasView("oldBone/insituAndSurfaceBone/insituProportion")) {
                // makeDynamicVocab("CheckBoxGroup", "oldBone/insituAndSurfaceBone/insituProportion", "Insitu Proportion", "{insituProportion}", null, "oldBone/insituAndSurfaceBone/insituProportionContainer");
                makeDynamicVocab("PictureGallery", "oldBone/insituAndSurfaceBone/insituProportion", "Insitu Proportion", "{insituProportion}", "inSituPictureCallback();", "oldBone/insituAndSurfaceBone/insituProportionContainer", "Insitu Proportion", "vocab"); 
                Log.d("updateInsituProportion()", "Making insituProportion picture gallery");
              }
              removeInsituProportion = false;
            }
          }
        });
      }
    // }
  }
  if (removeInsituProportion) {
    if (hasView("oldBone/insituAndSurfaceBone/insituProportion")) {
      removeView("oldBone/insituAndSurfaceBone/insituProportion");
      Log.d("updateInsituProportion()", "Removing insituProportion picture gallery");
    }
  }
}

String assocMaterialId = null;

/** Saves the associated materials tabgroup **/
autosaveAssociatedMaterials() {
  // save the associated materials.
  Boolean enable_autosave = true;
  // keepTabGroupChanges("associatedMaterials");
  saveTabGroup("associatedMaterials", assocMaterialId, null, null, new SaveCallback() {
    onSave(uuid, newRecord) {
      // entity_id is the old bone id and uuid is the assoc materials id.
      assocMaterialId = uuid;
      Log.d("autosaveAssociatedMaterials()", "Saving the  relation between oldBone " + entity_id + " and associatedMaterials " + assocMaterialId);
      saveEntitiesToRel("Old Bone Feature Associated Materials", entity_id, assocMaterialId, "listAssociatedMaterials();");
    }
  }, enable_autosave);
}

onEvent("oldBone/associatedMaterials/addInsituMaterial", "delayclick", "newRecordAssocMaterial(true);");
// onEvent("oldBone/associatedMaterials/addSurfaceMaterial", "delayclick", "newRecordAssocMaterial(false);");
onEvent("oldBone/associatedMaterials/addSurfaceMaterial", "delayclick", "showToast(\"This is a placeholder\")");


List associatedInsituMaterialVocab = new ArrayList();
List associatedSurfaceMaterialVocab = new ArrayList();

// globals required for use tab showing and cancelling in onShow function for associated materials.
Boolean removeAssocMussel = true;
Boolean removeAssocHearth = true;
Boolean removeAssocEggshell = true;
Boolean removeAssocStone = true;
Boolean removeOchre = true;
Boolean removeAssocOther = true;

Boolean isInsituMaterial = true;

/** Creates a new associated materials record for recording, as long as no associated material already exists. **/
newRecordAssocMaterial(Boolean insituMaterial) {
  if(!isNull(entity_id)) {
    fetchOne("select uuid, response " +
      "from latestNonDeletedArchEntFormattedIdentifiers " +
      "where aenttypename = 'Associated Materials' " +
      "and uuid in  (select uuid " +
      "FROM latestNonDeletedAentReln " +
      "where relationshipid in (select relationshipid " +
      "FROM latestNonDeletedAentReln " +
      "JOIN relationship using (relationshipid) " +
      "JOIN relntype using (relntypeid) " +
      "where uuid = "+entity_id + " " +
      "and relntypeName = 'Old Bone Feature Associated Materials') " +
      "and uuid != "+entity_id+");",  new FetchCallback() {
      onFetch(result) {
        if(isNull(result)) {
          isInsituMaterial = insituMaterial;
          assocMaterialId = null;
          newTabGroup("associatedMaterials");
          removeAllViewsAndContainers("associatedMaterials");
          // renderAssocMaterial();
          renderAssocMaterialControl();
        } else {
          showToast("Only one associated material can be recorded");
        }
      }
    });
  }
}

/** Renders the dynamic fields in the associatedMaterials/control tab, which other dynamic rendering for the tabgroup is dependant upon. **/
renderAssocMaterialControl() {
  renderAssocMaterialControl(null, null);
}

/** Renders the dynamic fields in the associatedMaterials/control tab, which other dynamic rendering for the tabgroup is dependant upon. 
    Executes the callback once the associated Insitu or Surface material list is rendered. **/
renderAssocMaterialControl(String listCallback) {
  renderAssocMaterialControl(listCallback, listCallback);
}

/** Renders the dynamic fields in the associatedMaterials/control tab, which other dynamic rendering for the tabgroup is dependant upon. 
    Executes the appropriate callback once the associated Insitu or Surface material list is rendered. **/
renderAssocMaterialControl(String insituListCallback, String surfaceListCallback) {
  if (isInsituMaterial) {  
    // render the material list if not already done so
    if (!hasView("associatedMaterials/control/associatedInsituMaterial")) {
      executeViewTask(new ViewTask() {
        doTask() {
          String callback = "onEvent(\"associatedMaterials/control/associatedInsituMaterial\", \"click\", \"renderAssocMaterial();\"); renderAssocMaterial();";
          makeDynamicVocab("CheckBoxGroup", "associatedMaterials/control/associatedInsituMaterial", "Associated in situ material", "{associatedInsituMaterial}", callback, null, "Associated in situ material", "vocab");
          Log.d("renderAssocMaterialControl()", "Added Insitu material list");
          if (!isNull(insituListCallback)) {
            Log.d("renderAssocMaterialControl()", "Executing insituListCallback");
            execute(insituListCallback);
          }
        }
      });
    }
  } else {
    if (!hasView("associatedMaterials/control/associatedSurfaceMaterial")) {
      executeViewTask(new ViewTask() {
        doTask() {
          String callback = "onEvent(\"associatedMaterials/control/associatedSurfaceMaterial\", \"click\", \"renderAssocMaterial();\"); renderAssocMaterial();";
          makeDynamicVocab("CheckBoxGroup", "associatedMaterials/control/associatedSurfaceMaterial", "Associated surface material", "{associatedSurfaceMaterial}", callback, null, "Associated surface material", "vocab");
          Log.d("renderAssocMaterialControl()", "Added Surface material list");
          if (!isNull(surfaceListCallback)) {
            Log.d("renderAssocMaterialControl()", "Executing surfaceListCallback");
            execute(surfaceListCallback);
          }
        }
      });
    }
  }
}

/** Retrieves the associated material checkbox selection. **/
List getSelectedAssocMaterial() {
  if (!hasView("associatedMaterials/control/associatedInsituMaterial") && !hasView("associatedMaterials/control/associatedSurfaceMaterial")) {
    Log.e("getSelectedAssocMaterial()", "Error: no material list provided");
    return null;
  } else {
    selectedAssocMaterial = null;
    if (isInsituMaterial) {
      selectedAssocMaterial = getFieldValue("associatedMaterials/control/associatedInsituMaterial");
    } else {
      selectedAssocMaterial = getFieldValue("associatedMaterials/control/associatedSurfaceMaterial");
    }
    print("Selected Material: " + selectedAssocMaterial);
    if (selectedAssocMaterial == null || selectedAssocMaterial.isEmpty()) {
      Log.e("getSelectedAssocMaterial()", "Error: no material type selected");
    } 
    return selectedAssocMaterial;
  }
}

/** Renders the dynamic fields for the associated materials tabgroup. **/
renderAssocMaterial() {
  // get the selected material list values 
  selectedAssocMaterial = getSelectedAssocMaterial();
  if (selectedAssocMaterial != null && !selectedAssocMaterial.isEmpty())
  {    
    // determine which assoc material was selected
    for (selectedItem : selectedAssocMaterial) {
      // value = selectedItem.getValue();
      // name = selectedItem.getName();
      if (isInsituMaterial) {
        for (type : associatedInsituMaterialVocab) {
          if (selectedItem.getName().equals(type.get(0))) {
            executeViewTask(new ViewTask() {
              doTask() {
                if (type.get(1).equals("mussel")) {
                  Log.d("recordAssocMaterial()", "insitu mussel selected");
                  if (!hasView("associatedMaterials/mussel/bivalvePreservation")) {
                    makeDynamicVocab("RadioGroup", "associatedMaterials/mussel/bivalvePreservation", "Bivalve preservation", "{bivalvePreservation}", null, null, "Bivalve preservation", "vocab");
                  }
                  removeAssocMussel = false;
                } else if(type.get(1).equals("hs")) {
                  Log.d("recordAssocMaterial()", "insitu hs selected");
                  if (!hasView("associatedMaterials/hearthMaterial/associatedHearthMaterial")) {
                    makeDynamicVocab("CheckBoxGroup", "associatedMaterials/hearthMaterial/associatedHearthMaterial", "Associated Hearth Material", "{associatedHearthMaterial}", null, null, "Associated Hearth Material", "vocab");
                  }
                  removeAssocHearth = false;
                } else if(type.get(1).equals("eggshell")) {
                  Log.d("recordAssocMaterial()", "insitu eggshell selected");
                  if (!hasView("associatedMaterials/eggshell/associatedEggshell")) {
                    makeDynamicVocab("CheckBoxGroup", "associatedMaterials/eggshell/associatedEggshell", "Associated Eggshell", "{associatedEggshell}", null, null, "Associated Eggshell", "vocab");
                  }
                  removeAssocEggshell = false;
                } else if(type.get(1).equals("stoneart")) {
                  Log.d("recordAssocMaterial()", "insitu stoneart selected");
                  String callback = "onEvent(\"associatedMaterials/stoneArtefact/associatedStoneArtefacts\", \"click\", \"updateDynamicAssociatedStone();\");";
                  if (!hasView("associatedMaterials/stoneArtefact/associatedStoneArtefacts")) {
                    makeDynamicVocab("CheckBoxGroup", "associatedMaterials/stoneArtefact/associatedStoneArtefacts", "Associated Stone Artefacts", "{associatedStoneArtefacts}", callback, "associatedMaterials/stoneArtefact/stoneArtefactsContainer", "Associated Stone Artefacts", "vocab");
                  }
                  if (!hasView("associatedMaterials/stoneArtefact/rawMaterialTypesPresent")) {
                    makeDynamicVocab("CheckBoxGroup", "associatedMaterials/stoneArtefact/rawMaterialTypesPresent", "Raw Material Types Present", "{rawMaterialTypesPresent}", null, "associatedMaterials/stoneArtefact/rawStoneContainer", "Raw Material Types Present", "vocab");
                  }
                  removeAssocStone = false;
                } else if (type.get(1).equals("ochre")) {
                  Log.d("recordAssocMaterial()", "insitu ochre selected");
                } else if(type.get(1).equals("otherart")) {
                  Log.d("recordAssocMaterial()", "insitu otherart selected");
                  if (!hasView("associatedMaterials/otherWorked/associatedOtherArtefacts")) {
                    makeDynamicVocab("CheckBoxGroup", "associatedMaterials/otherWorked/associatedOtherArtefacts", "Associated Other Artefacts", "{associatedOtherArtefacts}", null, null, "Associated Other Artefacts", "vocab");
                  }
                  removeAssocOther = false;
                } else {
                  Log.e("recordAssocMaterial()", "Error: no matched insitu selected");
                }
              }
            });
          }
        }
      } else {
        for (type : associatedSurfaceMaterialVocab) {
          if (selectedItem.getName().equals(type.get(0))) {
            if (type.get(1).equals("mussel")) {
              Log.d("recordAssocMaterial()", "surface mussel selected");
              showToast("Feature Unimplemented");
            } else if(type.get(1).equals("hs")) {
              Log.d("recordAssocMaterial()", "surface hs selected");
              showToast("Feature Unimplemented");
            } else if(type.get(1).equals("eggshell")) {
              Log.d("recordAssocMaterial()", "surface eggshell selected");
              showToast("Feature Unimplemented");
            } else if(type.get(1).equals("artefacts")) {
              Log.d("recordAssocMaterial()", "surface artefacts selected");
              showToast("Feature Unimplemented");
            } else if (type.get(1).equals("ochre")) {
              Log.d("recordAssocMaterial()", "surface ochre selected");
              showToast("Feature Unimplemented");
            } else if(type.get(1).equals("otherwork")) {
              Log.d("recordAssocMaterial()", "surface otherwork selected");
              showToast("Feature Unimplemented");
            } else {
              Log.e("recordAssocMaterial()", "Error: no matched surface selected");
            }
          }
        }
      }
    }
  }
  // show and cancel the appropriate associated material tabs.
  onShowAssociatedMaterials();
}

onEvent("associatedMaterials", "show", "onShowAssociatedMaterials();");

/** Handles tab showing and closing for the associated materials tabgroup. **/
onShowAssociatedMaterials() {
  // if the tab show is triggered after loading, don't execute the rest of this function.
  if (loadingAssocMaterial) {
    Log.d("onShowAssociatedMaterials()", "Exiting function, loading associated material");
    return;
  }

  // remove unselected tabs
  if (removeAssocMussel) {
    Log.d("onShowAssociatedMaterials()", "Cancelling associated mussel tab");
    cancelTab("associatedMaterials/mussel", false);
  }
  if (removeAssocHearth) {
    Log.d("onShowAssociatedMaterials()", "Cancelling associated hearth tab");
    cancelTab("associatedMaterials/hearthMaterial", false);
  } 
  if (removeAssocEggshell) {
    Log.d("onShowAssociatedMaterials()", "Cancelling associated eggshell tab");
    cancelTab("associatedMaterials/eggshell", false);
  }
  if (removeAssocStone) {
    Log.d("onShowAssociatedMaterials()", "Cancelling associated stone tab");
    cancelTab("associatedMaterials/stoneArtefact", false);
  }
  if (removeAssocOther) {
    Log.d("onShowAssociatedMaterials()", "Cancelling associated other tab");
    cancelTab("associatedMaterials/otherWorked", false);
  }

  // show the selected tabs
  if (!removeAssocMussel) {
    Log.d("onShowAssociatedMaterials()", "Showing associated mussel tab");
    showTab("associatedMaterials/mussel");
    removeAssocMussel = true;
  }   
  if (!removeAssocHearth) {
    Log.d("onShowAssociatedMaterials()", "Showing associated hearth tab");
    showTab("associatedMaterials/hearthMaterial");
    removeAssocHearth = true;
  }
  if (!removeAssocEggshell) {
    Log.d("onShowAssociatedMaterials()", "Showing associated eggshell tab");
    showTab("associatedMaterials/eggshell");
    removeAssocEggshell = true;
  } 
  if (!removeAssocStone) {
    Log.d("onShowAssociatedMaterials()", "Showing associated stone tab");
    showTab("associatedMaterials/stoneArtefact");
    removeAssocStone = true;
  } 
  if (!removeAssocOther) {
    Log.d("onShowAssociatedMaterials()", "Showing associated other tab");
    showTab("associatedMaterials/otherWorked");
    removeAssocOther = true;
  }

  // switch to the control tab
  showTab("associatedMaterials/control");
  
  // save the tabgroup
  autosaveAssociatedMaterials();
}

onEvent("oldBone/associatedMaterials", "show", "listAssociatedMaterials();");

/** Populates the in-situ and surface associated materials list. **/
listAssociatedMaterials() {
  if(!isNull(entity_id)) {
     String assocListQuery = "select uuid, response " +
      "from latestNonDeletedArchEntFormattedIdentifiers " +
      "where aenttypename = 'Associated Materials' " +
      "and uuid in  (select uuid " +
      "FROM latestNonDeletedAentReln " +
      "where relationshipid in (select relationshipid " +
      "FROM latestNonDeletedAentReln " +
      "JOIN relationship using (relationshipid) " +
      "JOIN relntype using (relntypeid) " +
      "where uuid = "+entity_id + " " +
      "and relntypeName = 'Old Bone Feature Associated Materials') " +
      "and uuid != "+entity_id+") " + 
      "limit ? offset ?;";
    populateCursorList("oldBone/associatedMaterials/associatedInsituList", assocListQuery, 25);
    Log.d("listAssociatedMaterials()", "Updated cursor list: associatedInsituList");

  } else {
    result = new ArrayList();
    result.add(new NameValuePair("{noRecordsFound}", ""));
    populateList("oldBone/associatedMaterials/associatedInsituList", result);
    populateList("oldBone/associatedMaterials/associatedSurfaceList", result);
  }    
}

onEvent("oldBone/associatedMaterials/associatedInsituList", "click", "loadAssociatedMaterial();");
// onEvent("oldBone/associatedMaterials/associatedSurfaceList", "click", "loadAssociatedMaterial();");
onEvent("oldBone/associatedMaterials/associatedSurfaceList", "click", "showToast(\"This is a placeholder\");");

Boolean loadingAssocMaterial = false;

loadAssocCallback(assocID) {
  // render the default views for each associated material tab
  makeDynamicVocab("RadioGroup", "associatedMaterials/mussel/bivalvePreservation", "Bivalve preservation", "{bivalvePreservation}", null, null, "Bivalve preservation", "vocab");
  removeAssocMussel = false;
  makeDynamicVocab("CheckBoxGroup", "associatedMaterials/hearthMaterial/associatedHearthMaterial", "Associated Hearth Material", "{associatedHearthMaterial}", null, null, "Associated Hearth Material", "vocab");
  removeAssocHearth = false;
  makeDynamicVocab("CheckBoxGroup", "associatedMaterials/eggshell/associatedEggshell", "Associated Eggshell", "{associatedEggshell}", null, null, "Associated Eggshell", "vocab");
  removeAssocEggshell = false;
  String callback = "onEvent(\"associatedMaterials/stoneArtefact/associatedStoneArtefacts\", \"click\", \"updateDynamicAssociatedStone();\");";
  makeDynamicVocab("CheckBoxGroup", "associatedMaterials/stoneArtefact/associatedStoneArtefacts", "Associated Stone Artefacts", "{associatedStoneArtefacts}", callback, "associatedMaterials/stoneArtefact/stoneArtefactsContainer", "Associated Stone Artefacts", "vocab");
  makeDynamicVocab("CheckBoxGroup", "associatedMaterials/stoneArtefact/rawMaterialTypesPresent", "Raw Material Types Present", "{rawMaterialTypesPresent}", null, "associatedMaterials/stoneArtefact/rawStoneContainer", "Raw Material Types Present", "vocab");
  removeAssocStone = false;
  makeDynamicVocab("CheckBoxGroup", "associatedMaterials/otherWorked/associatedOtherArtefacts", "Associated Other Artefacts", "{associatedOtherArtefacts}", null, null, "Associated Other Artefacts", "vocab");
  removeAssocOther = false;

  // render the 'selection-dependent' views for the stone tab
  String callback = "onEvent(\"associatedMaterials/stoneArtefact/chippedStoneArtefacts\", \"click\", \"updateDynamicChippedStone();\");";
  makeDynamicVocab("CheckBoxGroup", "associatedMaterials/stoneArtefact/chippedStoneArtefacts", "Associated Chipped Stone Artefacts", "{chippedStoneArtefacts}", callback, "associatedMaterials/stoneArtefact/chippedStoneContainer", "Associated Chipped Stone Artefacts", "vocab");
  removeChippedStone = false;
  makeDynamicVocab("CheckBoxGroup", "associatedMaterials/stoneArtefact/unmodifiedStone", "Associated Unmodified Stone", "{unmodifiedStone}", null, "associatedMaterials/stoneArtefact/unmodifiedStoneContainer", "Associated Unmodified Stone", "vocab");
  removeUnmodifiedStone = false;
  makeDynamicVocab("CheckBoxGroup", "associatedMaterials/stoneArtefact/groundStoneType", "Ground Stone Types Present", "{groundStoneType}", null, "associatedMaterials/stoneArtefact/groundStoneTypeContainer", "Ground Stone Types Present", "vocab");
  makeDynamicVocab("CheckBoxGroup", "associatedMaterials/stoneArtefact/groundStoneStatus", "Ground Stone Status", "{groundStoneStatus}", null, "associatedMaterials/stoneArtefact/groundStoneStatusContainer", "Ground Stone Status", "vocab");
  removeGroundStone = false;
  makeDynamicVocab("CheckBoxGroup", "associatedMaterials/stoneArtefact/retouchedArtefacts", "Associated Retouched Artefacts", "{retouchedArtefacts}", null, "associatedMaterials/stoneArtefact/retouchedStoneContainer", "Associated Retouched Artefacts", "vocab");
  removeRetouchedArtefacts = false;
  
  // load the saved values into the rendered views
  dialog = showBusy("loading record", "please wait");
  showTabGroup("associatedMaterials", assocID, new FetchCallback() {
    onFetch(result) {
      print("loaded assoc: " + result + " with attributes: " + result.getAttributes());
      removeUnselectedMaterials();
      dialog.dismiss();
    }
  });
}

//onEvent("associatedMaterials", "show", "removeUnselectedMaterials();");

/** Removes the tabs for unselected materials when loading. **/
removeUnselectedMaterials() {
  // only perform the removal if the associated materials are being loaded.
  if (loadingAssocMaterial) {
    Log.d("removeUnselectedMaterials()", "Removing unseletected materials from loaded associated material.");
    // get the selected material list values 
    selectedAssocMaterial = getSelectedAssocMaterial();
    if (selectedAssocMaterial != null && !selectedAssocMaterial.isEmpty())
    {
      removeAssocMussel = true;
      removeAssocHearth = true;
      removeAssocEggshell = true;
      removeAssocStone = true;
      removeAssocOther = true;
      // flag the selected values which shouldn't be removed.
      for (selectedItem : selectedAssocMaterial) {
        if (isInsituMaterial) {
          for (type : associatedInsituMaterialVocab) {
            if (selectedItem.getName().equals(type.get(0))) {
              if (type.get(1).equals("mussel")) {
                removeAssocMussel = false;
              } else if(type.get(1).equals("hs")) {
                removeAssocHearth = false;
              } else if(type.get(1).equals("eggshell")) {
                removeAssocEggshell = false;
              } else if(type.get(1).equals("stoneart")) {
                removeAssocStone = false;
              } else if (type.get(1).equals("ochre")) {
                // no tab to remove
              } else if(type.get(1).equals("otherart")) {
                removeAssocOther = false;
              } else {
                Log.e("removeUnselectedMaterials()", "Error: no matched insitu selected");
              }
            }
          }
        }
      }

      // remove the appropriate selection-dependent views for the tabs that aren't going to be removed.
      if (!removeAssocStone) {
        removeChippedStone = true;
        removeUnmodifiedStone = true;
        removeGroundStone = true;
        assocStones = getFieldValue("associatedMaterials/stoneArtefact/associatedStoneArtefacts");
        for (selectedItem : assocStones) {
          for (type : associatedStoneArtefactsVocab) {
            if (selectedItem.getName().equals(type.get(0))) {
              if (type.get(1).equals("cs")) {
                removeChippedStone = false;
              } else if (type.get(1).equals("um")) {
                removeUnmodifiedStone = false;
              } else if (type.get(1).equals("ground")) {
                removeGroundStone = false;
              } else {
                Log.e("removeUnselectedMaterials", "Error: no stone artefact selected");
              }
            }
          }
        }
        removeDynamicAssociatedStone();
        removeRetouchedArtefacts = true;
        if (!removeChippedStone) {
          chippedStone = getFieldValue("associatedMaterials/stoneArtefact/chippedStoneArtefacts");
          for (selectedItem : chippedStone) {
            for (type : associatedChippedStoneVocab) {
              if (selectedItem.getName().equals(type.get(0))) {
                if (type.get(1).equals("ru")) {
                  removeRetouchedArtefacts = false;
                }
              }
            }
          }
        }
        removeRetouchedArtefacts();
      }

      // remove the unselected tabs, switching the load flag mark that the 'loading' process has finished.
      loadingAssocMaterial = false;
      onShowAssociatedMaterials();
    }
  }
}


/** Loads an associated material. **/
loadAssociatedMaterial() {
  String assocID = getListItemValue();
  Log.d("loadAssociatedMaterial()", "Preparing to load associated material with ID: " + assocID);
  if (!isNull(assocID)) {
    assocMaterialId = assocID;
    loadingAssocMaterial = true;
    removeAllViewsAndContainers("associatedMaterials");
    // load the saved values for each view
    renderAssocMaterialControl("loadAssocCallback(\""+assocMaterialId+"\");");
  }
}


/** Return to the oldBone/AssociateMaterials tab when the user came back to the oldBone tabgroup from the associateMaterials tabgroup. **/
Boolean fromAssocTabgroup = false;
onEvent("associatedMaterials", "show", "fromAssocTabgroup=true;");
onEvent("oldBone", "show", "goToAssocTab();");
goToAssocTab() {
  if (fromAssocTabgroup) {
    Log.d("goToAssocTab()", "Returning to the associated materials tab");
    showTab("oldBone/associatedMaterials");
    fromAssocTabgroup = false;
  }
}

List associatedStoneArtefactsVocab = new ArrayList();
List associatedChippedStoneVocab = new ArrayList();

Boolean removeChippedStone = true;
Boolean removeUnmodifiedStone = true;
Boolean removeGroundStone = true;

/** Detect and display the relevent associated stone artefact views. **/
updateDynamicAssociatedStone() {
  removeChippedStone = true;
  removeUnmodifiedStone = true;
  removeGroundStone = true;
  assocStones = getFieldValue("associatedMaterials/stoneArtefact/associatedStoneArtefacts");
  // compare each selected artefact against the stone artefact vocab to determine which one(s) the user selected
  for (selectedItem : assocStones) {
    for (type : associatedStoneArtefactsVocab) {
      if (selectedItem.getName().equals(type.get(0))) {
        executeViewTask(new ViewTask() {
          doTask() {
            if (type.get(1).equals("cs")) {
              Log.d("updateDynamicAssociatedStone", "cs selected");
              String callback = "onEvent(\"associatedMaterials/stoneArtefact/chippedStoneArtefacts\", \"click\", \"updateDynamicChippedStone();\");";
              if (!hasView("associatedMaterials/stoneArtefact/chippedStoneArtefacts")) {
                makeDynamicVocab("CheckBoxGroup", "associatedMaterials/stoneArtefact/chippedStoneArtefacts", "Associated Chipped Stone Artefacts", "{chippedStoneArtefacts}", callback, "associatedMaterials/stoneArtefact/chippedStoneContainer", "Associated Chipped Stone Artefacts", "vocab");
              }
              removeChippedStone = false;
            } else if (type.get(1).equals("um")) {
              Log.d("updateDynamicAssociatedStone", "um selected");
              if (!hasView("associatedMaterials/stoneArtefact/unmodifiedStone")) {
                makeDynamicVocab("CheckBoxGroup", "associatedMaterials/stoneArtefact/unmodifiedStone", "Associated Unmodified Stone", "{unmodifiedStone}", null, "associatedMaterials/stoneArtefact/unmodifiedStoneContainer", "Associated Unmodified Stone", "vocab");
              }
              removeUnmodifiedStone = false;
            } else if (type.get(1).equals("ground")) {
              Log.d("updateDynamicAssociatedStone", "ground selected");
              if (!hasView("associatedMaterials/stoneArtefact/groundStoneType")) {
                makeDynamicVocab("CheckBoxGroup", "associatedMaterials/stoneArtefact/groundStoneType", "Ground Stone Types Present", "{groundStoneType}", null, "associatedMaterials/stoneArtefact/groundStoneTypeContainer", "Ground Stone Types Present", "vocab");
              }
              if (!hasView("associatedMaterials/stoneArtefact/groundStoneStatus")) {
                makeDynamicVocab("CheckBoxGroup", "associatedMaterials/stoneArtefact/groundStoneStatus", "Ground Stone Status", "{groundStoneStatus}", null, "associatedMaterials/stoneArtefact/groundStoneStatusContainer", "Ground Stone Status", "vocab");
              }
              removeGroundStone = false;
            } else {
              Log.e("updateDynamicAssociatedStone", "Error: no stone artefact selected");
            }
          }
        });
      }
    }    
  }
  // remove the appropriate dynamic views.
  removeDynamicAssociatedStone();
}

/** Removes the relevent associated stone artefact views. **/
removeDynamicAssociatedStone() {
  if (removeChippedStone) {
    if (hasView("associatedMaterials/stoneArtefact/chippedStoneArtefacts")) {
      removeView("associatedMaterials/stoneArtefact/chippedStoneArtefacts");
      if (hasView("associatedMaterials/stoneArtefact/retouchedArtefacts")) {
        removeView("associatedMaterials/stoneArtefact/retouchedArtefacts");
      }
    }
  }
  if (removeUnmodifiedStone) {
    if (hasView("associatedMaterials/stoneArtefact/unmodifiedStone")) {
      removeView("associatedMaterials/stoneArtefact/unmodifiedStone");
    }
  }
  if (removeGroundStone) {
    if (hasView("associatedMaterials/stoneArtefact/groundStoneType")) {
      removeView("associatedMaterials/stoneArtefact/groundStoneType");
    }
    if (hasView("associatedMaterials/stoneArtefact/groundStoneStatus")) {
      removeView("associatedMaterials/stoneArtefact/groundStoneStatus");
    }
  }
}

Boolean removeRetouchedArtefacts = true;

/** Displays the associated retouched artefacts view for associated stone artefacts **/
updateDynamicChippedStone() {
  chippedStone = getFieldValue("associatedMaterials/stoneArtefact/chippedStoneArtefacts");
  removeRetouchedArtefacts = true;
  for (selectedItem : chippedStone) {
    for (type : associatedChippedStoneVocab) {
      if (selectedItem.getName().equals(type.get(0))) {
        executeViewTask(new ViewTask(){
          doTask() {
            if (type.get(1).equals("ru")) {
              Log.d("updateDynamicChippedStone", "ru selected");
              if (!hasView("associatedMaterials/stoneArtefact/retouchedArtefacts")) {
                makeDynamicVocab("CheckBoxGroup", "associatedMaterials/stoneArtefact/retouchedArtefacts", "Associated Retouched Artefacts", "{retouchedArtefacts}", null, "associatedMaterials/stoneArtefact/retouchedStoneContainer", "Associated Retouched Artefacts", "vocab");
              }
              removeRetouchedArtefacts = false;
            }
          }
        }); 
      }
    }
  }
  removeRetouchedArtefacts();
}

/** Removes the retouched artefacts view if appropriate. **/
removeRetouchedArtefacts() {
  if (removeRetouchedArtefacts) {
    if (hasView("associatedMaterials/stoneArtefact/retouchedArtefacts")) {
      removeView("associatedMaterials/stoneArtefact/retouchedArtefacts");
    }
  }
}



/*******************/
/* Grid Square GPS */

onEvent("oldBone/basicIdentification/calculateGridSquare", "click", "calculateGridSquare();");

/** Calculates the grid square that the feature is in. **/
calculateGridSquare() {
  // check that GPS is on and a position can be found.
  if(!isExternalGPSOn() && !isInternalGPSOn()) {
    showToast("Please turn on GPS");
    Log.e("calculateGridSquare()", "Internal and external GPS are off.");
    return;
  }
  Object position = getGPSPosition();
  if (position == null) {
    showToast("A GPS position could not be found");
    Log.e("calculateGridSquare()", "A GPS position couldn't be found.");
    return;
  }
  if(isNull(entity_id)) {
    showToast("The record needs to be saved before calculating the grid square");
    Log.e("calculateGridSquare()", "The entity_id is null as the record has not been saved yet.");
    return;
  }

  // record the gps geometry 
  dialog = showBusy("Caculating grid square", "please wait");
  Object projPosition = getGPSPositionProjected();
  Log.d("calculateGridSquare()", "Projected position: " + projPosition.toString());
  Double latitude = position.getLatitude();
  Double longitude = position.getLongitude();
  Double northing = projPosition.getLatitude();
  Double easting = projPosition.getLongitude();
  Log.d("calculateGridSquare()", "Using module srid " + getModuleSrid() + ", obtained as lat and long (" + latitude.toString() + " " + longitude.toString() + "), and northing and easting (" + northing.toString() + " " + easting.toString() + ")");
  samplePoint = new Point(new MapPos(easting, northing), null, (PointStyle) null, null);
  ArrayList geolist = new ArrayList();
  geolist.add(samplePoint);
  saveArchEnt(entity_id, "oldBone", geolist, null, new SaveCallback() {
    onSave(uuid, newRecord) {
      Log.d("calculateGridSquare()", "Saved geometry: " + geolist.toString());
      // queryGridDB(easting.toString(), northing.toString());
      queryGridDB("693400", "6257300"); // Used for testing
      showWarning("Alert", "The calculate grid square is currently using the following mock projections for testing: (693400, 6257300)");
      dialog.dismiss();
    }  
  });
}

/** Connects to and queries the grid db. **/
queryGridDB(String easting, String northing) {
  String srid = getModuleSrid();
  File file = new File("/sdcard/faims/modules/"+getModuleId()+"/files/data/grid.sqlite3");
  type = jsqlite.Constants.SQLITE_OPEN_READONLY;
  jsqlite.Database db = new jsqlite.Database();
  
  // Query the grid square
  String gridSquareQuery = "select label from grid where coveredBy(pointfromtext('POINT ("+easting+" "+northing+")',"+srid+"), grid) order by x,y limit 1;";
  Log.d("queryGridDB()", "Running query to select grid label: " + gridSquareQuery);
  try {
    db.open(file.getPath(), type);
    db.exec(gridSquareQuery, new Callback() {
      public void columns(String[] coldata) {
        Log.d("grid square query", "coldata: " + Arrays.toString(coldata));
      }
      public void types(String[] types) {
        Log.d("grid square query", "types: " + Arrays.toString(types));
      }
      public boolean newrow(String[] rowdata) {
        Log.d("grid square query", "rowdata: " + Arrays.toString(rowdata));
        setFieldValue("oldBone/basicIdentification/gridSquare", rowdata[0].toString());
        showToast("You are in grid square " + rowdata[0].toString());
        return false;
      }
    });
  } catch (Exception e) {
    Log.e("error dumping database", e.toString());
  } finally {
    db.close();
  }

  // Query the grid warning
  String warningQuery = "select warning from gridbuffer where  coveredBy(pointfromtext('POINT ("+easting+" "+northing+")',"+srid+"), gridbuffer);";
  Log.d("queryGridDB()", "Running query to select grid warning: " + warningQuery);
  try {
    db.open(file.getPath(), type);
    db.exec(warningQuery, new Callback() {
      public void columns(String[] coldata) {
        Log.d("grid warning query", "coldata: " + Arrays.toString(coldata));
      }
      public void types(String[] types) {
        Log.d("grid warning query", "types: " + Arrays.toString(types));
      }
      public boolean newrow(String[] rowdata) {
        Log.d("grid warning query", "rowdata: " + Arrays.toString(rowdata));
        if (rowdata[0].toString().equals("warning")) {
          showWarning("Warning", "You are close to a grid square boundary");
        }
        return false;
      }
    });
  } catch (Exception e) {
    Log.e("error dumping database", e.toString());
  } finally {
    db.close();
  }
}

/*******************/



/** Populates a global list variable with the contents of a specified vocabulary. **/
populateGlobalVocab(String vocabName, List globalList) {
  fetchAll("select vocabid, vocabname from vocabulary left join attributekey using (attributeid) where attributename = '" + vocabName + "';", new FetchCallback() {
    onFetch(result) {
      for (item : result) {
        List temp = new ArrayList();
        temp.add(item.get(0));
        temp.add(item.get(1));
        globalList.add(temp);
      }
    }
  }); 
}

/** Module Initialisation **/
init() {
  // List of feature entities for recording.
  entityTypes = new ArrayList();
  entityTypes.add(new NameValuePair("{oldBone}", "Old Bone Feature"));
  populateDropDown("control/control/entityTypes", entityTypes);
  entityTypes.add(0, new NameValuePair("{all}", "Feature"));
  populateDropDown("control/search/entityTypes", entityTypes);

  // old bone init
  populateOldBoneAttributes();
  fetchOne("select vocabid from vocabulary join attributekey using (attributeid) where attributename = 'Cluster' and vocabname = '{boneOnly}';", new FetchCallback() {
    onFetch(result) {
      setFieldValue("oldBone/basicIdentification/cluster", result.get(0)); // set the cluster field to be 'Bone Only'
      toggleAssociatedMaterials();
    }
  });
  onEvent("oldBone", "load", "cancelTab(\"oldBone/associatedMaterials\", false);");

  // set the vocab globals
  populateGlobalVocab("Cluster Type", cluserTypeVocab);
  populateGlobalVocab("Associated in situ material", associatedInsituMaterialVocab);
  populateGlobalVocab("Associated surface material", associatedSurfaceMaterialVocab); 
  populateGlobalVocab("Associated Stone Artefacts", associatedStoneArtefactsVocab); 
  populateGlobalVocab("Associated Chipped Stone Artefacts", associatedChippedStoneVocab);

}

onEvent("oldBone/topAndStratSetting/takePhoto", "click", "attachPictureTo(\"oldBone/topAndStratSetting/photos\");");

init();

