/*** 'Editable' - you can edit the code below based on the needs ***/
import java.util.concurrent.Callable;
import android.util.Log;

print("Very first line of logic after the import lines");

User user; // don't touch
String userid;

makeLocalID(){
    fetchOne("CREATE TABLE IF NOT EXISTS localSettings (key text primary key, value text);");
    fetchOne("drop view latestNonDeletedArchEntFormattedIdentifiers;");
    fetchOne("CREATE VIEW latestNonDeletedArchEntFormattedIdentifiers as " +
              "select uuid, aenttypeid, aenttypename, group_concat(response, '') as response, null as deleted " +
              "from ( " +
                "select uuid, aenttypeid, aenttypename, group_concat(format(formatstring, vocabname, measure, freetext, certainty), appendcharacterstring) as response, null as deleted, aentcountorder " +
                "from ( " +
                  "select uuid, aenttypeid, aenttypename, formatstring, vocabname, measure, freetext, certainty, appendcharacterstring, null as deleted, aentcountorder, vocabcountorder, attributeid " +
                  "from latestNonDeletedArchent " +
                    "JOIN aenttype using (aenttypeid) " +
                    "JOIN (select * from idealaent where isIdentifier='true') using (aenttypeid) " +
                    "join attributekey  using (attributeid) " +
                    "join latestNonDeletedAentValue using (uuid, attributeid) " +
                    "left outer join vocabulary using (attributeid, vocabid) " +
                  "order by uuid, aentcountorder, vocabcountorder " +
                ") " +
                "group by uuid, attributeid " +
                "having response is not null " +
                "order by uuid, aentcountorder) " +
              "group by uuid " +
              "order by uuid;"
    );


}
makeLocalID();

/*** Uneditable - you can edit the code below with extreme precaution ***/
/*** USER ***/

loadUsers() {
    fetchAll("select userid, fname || ' ' || lname from user where userdeleted is null;", new FetchCallback() {
        onFetch(result) {
            populateList("user/usertab/users", result);
        }
    });
}

String username = "";
String device = "";

login() {
    fetchOne("select userid,fname,lname,email from user where userid='" + getListItemValue() + "';", new FetchCallback() {
        onFetch(result) {
            user = new User(result.get(0),result.get(1),result.get(2),result.get(3));
            setUser(user);
            username = result.get(1) + " " + result.get(2);
            showTabGroup("control");
        }
    });
}

loadUsers();

onEvent("user/usertab/users", "click", "login()");

/*** SYNC ***/

startSync() {
    setSyncEnabled(true);
    setFileSyncEnabled(true);
}

stopSync() {
    setSyncEnabled(false);
    setFileSyncEnabled(false);
}

/** Vocab Population **/
/* Populates the path specified vocabulary from the database based on the given attribute name, where type 
is the type of the vocab to populate (checkbox, dropdown, radio or list). */
makeVocab(String type, String path, String attrib, List vocabExclusions){
  fetchAll("select vocabid, vocabname from vocabulary join attributekey using (attributeid) where attributename = '" + attrib + "' order by vocabcountorder;",
    new FetchCallback() {
      onFetch(result) {
        print("makeVocab() result: " + result);
        if (result!=null && result.size()>0 && vocabExclusions!=null && vocabExclusions.size()>0) {
          List filteredVocab = new ArrayList();
          for(item : result) {
            if (vocabExclusions.contains(item.get(1))) {
              Log.d("makeVocab()", "removing vocab exclusion: " + item.get(1));
            } else {
              filteredVocab.add(item);
            }
          }
          result=filteredVocab;
        }
        print("makeVocab() filtered result: " + result);
        if(type.equals("CheckBoxGroup")) {
          populateCheckBoxGroup(path, result);
        } else if(type.equals("DropDown")) {
          populateDropDown(path, result);
        } else if(type.equals("RadioGroup")) {
          populateRadioGroup(path, result);
        } else if(type.equals("List")) {
          populateList(path, result);
        }
      }
    });
}

/** Wrapper for to make a vocab without an exlusion list **/
makeVocab(String type, String path, String attrib) {
  makeVocab(type, path, attrib, null);
}

/** Makes a dynamic vocab and populates it using a data_schema vocab, with a callbackFunction to execute after creating the dynamic view. **/
makeDynamicVocab(String type, String path, String attrib, String label, String callbackFunction) {
  viewDef = createViewDef();
  if (type.equals("CheckBoxGroup")) {
    viewDef.createCheckboxGroup();
  } else {
    return;
  }
  
  if (!isNull(label)) {
    viewDef.setLabel(label);
  }

  fetchAll("select vocabid, vocabname from vocabulary join attributekey using (attributeid) where attributename = '" + attrib + "' order by vocabcountorder;", new FetchCallback() {
    onFetch(result) {
      print ("Dynamic Vocab: " + result);
      for (item : result) {
        viewDef.addChoice(item.get(1), item.get(0));
      }
      createView(path, viewDef);
      if (callbackFunction != null && !isNull(callbackFunction)) {
        execute(callbackFunction);
      }
    }
  });
}

/** Makes a dynamic vocab and populates it using a data_schema vocab. **/
makeDynamicVocab(String type, String path, String attrib, String label) {
  makeDynamicVocab(type, path, attrib, label, null);
}


/**************************/
/** Editable Module Code **/
/**************************/

String entity_id = null;

/** Saves the old bone entity. **/
saveOldBone() {
  enable_autosave = true;
  saveTabGroup("oldBone", entity_id, null, null, new SaveCallback() {
    onSave(uuid, newRecord) {
      entity_id = uuid;
      Log.d("saveOldBone()", "Old Bone record saved with id: " + entity_id);
      if (newRecord) {
        Log.d("saveOldBone", "New record created");
      }
    }
    onError(message) {
        showToast(message);
    }  
  }, enable_autosave);
}

onEvent("control/control/newOldBone", "delayclick", "newOldBone();");
onEvent("oldBone", "show", "saveOldBone();");

/** Creates a new old bone record. **/
newOldBone() {
  newTabGroup("oldBone");
  fetchOne("select vocabid from vocabulary join attributekey using (attributeid) where attributename = 'Cluster' and vocabname = '{boneOnly}';", new FetchCallback() {
    onFetch(result) {
      setFieldValue("oldBone/basicIdentification/cluster", result.get(0)); // set the cluster field to be 'Bone Only'
      toggleAssociatedMaterials();
      entity_id = null;
      keepTabGroupChanges("oldBone");
      saveOldBone();
    }
  });
}

/** Populates the checkboxes, lists, ... for the Old Bone tabgroup using the vocabularies. **/
populateOldBoneAttributes() {
  makeVocab("RadioGroup", "oldBone/basicIdentification/cluster", "Cluster");
  makeVocab("RadioGroup", "oldBone/basicIdentification/clusterType", "Cluster Type");
  makeVocab("CheckBoxGroup", "oldBone/insituAndSurfaceBone/bodyPartsIdentified", "Body Parts Identifed");
  makeVocab("CheckBoxGroup", "oldBone/insituAndSurfaceBone/taxonIdentified", "Taxon Identified");
  makeVocab("CheckBoxGroup", "oldBone/insituAndSurfaceBone/bonePreservation", "Bone Preservation");
  makeVocab("CheckBoxGroup", "oldBone/insituAndSurfaceBone/deliberateSurfaceModification", "Deliberate Surface Modification");
  makeVocab("CheckBoxGroup", "oldBone/associatedMaterials/associatedInsituMaterial", "Associated in situ material");
  makeVocab("CheckBoxGroup", "oldBone/associatedMaterials/associatedSurfaceMaterial", "Associated surface material");

  fetchAll("select vocabid, vocabname, pictureurl from vocabulary left join attributekey using (attributeid) where attributename = 'Topographic Setting';", new FetchCallback() {
    onFetch(pictures) {
      populatePictureGallery("oldBone/topAndStratSetting/topographicSetting", pictures);
    }
  });
  fetchAll("select vocabid, vocabname, pictureurl from vocabulary left join attributekey using (attributeid) where attributename = 'Sediment Type';", new FetchCallback() {
    onFetch(pictures) {
      populatePictureGallery("oldBone/topAndStratSetting/sedimentType", pictures);
    }
  });
  fetchAll("select vocabid, vocabname, pictureurl from vocabulary left join attributekey using (attributeid) where attributename = 'Vulnerability To Erosion';", new FetchCallback() {
    onFetch(pictures) {
      populatePictureGallery("oldBone/topAndStratSetting/vulnerabilityToErosion", pictures);
    }
  });
  fetchAll("select vocabid, vocabname, pictureurl from vocabulary left join attributekey using (attributeid) where attributename = 'Palaeotopographic Setting';", new FetchCallback() {
    onFetch(pictures) {
      populatePictureGallery("oldBone/topAndStratSetting/paleotopographicSetting", pictures);
    }
  });
}

/** Displays or hides the associated materials tabgroup depending on what cluster is selected. **/
toggleAssociatedMaterials() {
  String boneAndOther = null;
  fetchOne("select vocabid from vocabulary join attributekey using (attributeid) where attributename = 'Cluster' and vocabname = '{boneOnly}';", new FetchCallback() {
    onFetch(result) {
      if (!isNull(result)) {
        boneOnly = result.get(0);
        if (boneOnly.equals(getFieldValue("oldBone/basicIdentification/cluster"))) {
          Log.d("showAssociatedMaterials()", "Hiding associated materials Tab");
          cancelTab("oldBone/associatedMaterials", false);
          toggleClusterType(true);        
        } else {
          Log.d("showAssociatedMaterials()", "Showing associated materials Tab");
          showTab("oldBone/associatedMaterials");
          showTab("oldBone/basicIdentification");
          toggleClusterType(false);
        }
      }
    }
  });
}

/** Hides the irrelevant cluster types depending on the cluster chosen. **/
toggleClusterType(Boolean boneOnly) {
  List exclusions = new ArrayList();
  if (boneOnly) {
    exclusions.add("{inistAndOth}");
    exclusions.add("{surfAndOth}");
    exclusions.add("{bothAndOth}");
  } else {
    exclusions.add("{insitBO}");
    exclusions.add("{surfBO}");
    exclusions.add("{insitAndSurf}");
  }
  makeVocab("RadioGroup", "oldBone/basicIdentification/clusterType", "Cluster Type", exclusions);
}

onEvent("oldBone/basicIdentification/cluster", "click", "toggleAssociatedMaterials();");

onEvent("oldBone/associatedMaterials/addInsituMaterial", "click", "recordAssocMaterial(true);");
onEvent("oldBone/associatedMaterials/addSurfaceMaterial", "click", "recordAssocMaterial(false);");

List associatedInsituMaterialVocab = new ArrayList();
List associatedSurfaceMaterialVocab = new ArrayList();

/** Records the selected associated material(s). **/
recordAssocMaterial(Boolean insituMaterial) {
  selectedAssocMaterial = getFieldValue("oldBone/associatedMaterials/associatedInsituMaterial");
  if (!insituMaterial) {
    selectedAssocMaterial = getFieldValue("oldBone/associatedMaterials/associatedSurfaceMaterial");
  }
  print("Selected Material: " + selectedAssocMaterial);
  
  if (selectedAssocMaterial == null || selectedAssocMaterial.isEmpty()) {
    Log.d("recordAssocMaterial()", "Error: no material type selected");
  } else {    
    // determine which assoc material was selected
    for (selectedItem : selectedAssocMaterial) {
      // value = selectedItem.getValue();
      // name = selectedItem.getName();
      removeAllViewsAndContainers("associatedMaterials");
      showTabGroup("associatedMaterials");
      if (insituMaterial) {
        for (type : associatedInsituMaterialVocab) {
          if (selectedItem.getName().equals(type.get(0))) {
            executeViewTask(new ViewTask() {
              doTask() {
                if (type.get(1).equals("mussel")) {
                  Log.d("recordAssocMaterial()", "insitu mussel selected");
                  cancelTabGroup("associatedMaterials", false);
                  showTab("oldBone/associatedMaterials");
                } else if(type.get(1).equals("hs")) {
                  Log.d("recordAssocMaterial()", "insitu hs selected");
                  makeDynamicVocab("CheckBoxGroup", "associatedMaterials/recordMaterial/associatedHearthMaterial", "Associated Hearth Material", "{associatedHearthMaterial}");
                } else if(type.get(1).equals("eggshell")) {
                  Log.d("recordAssocMaterial()", "insitu eggshell selected");
                  makeDynamicVocab("CheckBoxGroup", "associatedMaterials/recordMaterial/associatedEggshell", "Associated Eggshell", "{associatedEggshell}");
                } else if(type.get(1).equals("artefacts")) {
                  Log.d("recordAssocMaterial()", "insitu artefacts selected");
                  String callback = "onEvent(\"associatedMaterials/recordMaterial/associatedStoneArtefacts\", \"click\", \"updateDynamicAssociatedStone();\");";
                  makeDynamicVocab("CheckBoxGroup", "associatedMaterials/recordMaterial/associatedStoneArtefacts", "Associated Stone Artefacts", "{associatedStoneArtefacts}", callback);
                  makeDynamicVocab("CheckBoxGroup", "associatedMaterials/recordMaterial/rawMaterialTypesPresent", "Raw Material Types Present", "{rawMaterialTypesPresent}");
                } else if(type.get(1).equals("otherwork")) {
                  Log.d("recordAssocMaterial()", "insitu otherwork selected");
                  makeDynamicVocab("CheckBoxGroup", "associatedMaterials/recordMaterial/associatedOtherWorked", "Associated Other Worked Material", "{associatedOtherWorked}");
                } else {
                  Log.d("recordAssocMaterial()", "Error: no matched insitu selected");
                }
              }
            });
          }
        }
      } else {
        for (type : associatedSurfaceMaterialVocab) {
          if (selectedItem.getName().equals(type.get(0))) {
            if (type.get(1).equals("mussel")) {
              Log.d("recordAssocMaterial()", "surface mussel selected");
              showToast("Feature Unimplemented");
            } else if(type.get(1).equals("hs")) {
              Log.d("recordAssocMaterial()", "surface hs selected");
              showToast("Feature Unimplemented");
            } else if(type.get(1).equals("eggshell")) {
              Log.d("recordAssocMaterial()", "surface eggshell selected");
              showToast("Feature Unimplemented");
            } else if(type.get(1).equals("artefacts")) {
              Log.d("recordAssocMaterial()", "surface artefacts selected");
              showToast("Feature Unimplemented");
            } else if(type.get(1).equals("otherwork")) {
              Log.d("recordAssocMaterial()", "surface otherwork selected");
              showToast("Feature Unimplemented");
            } else {
              Log.d("recordAssocMaterial()", "Error: no matched surface selected");
            }
          }
        }
      }
      
    }
  }
}

List associatedStoneArtefactsVocab = new ArrayList();
List associatedChippedStoneVocab = new ArrayList();

/** Detect and display the relevent associated stone artefact views. **/
updateDynamicAssociatedStone() {
  assocStones = getFieldValue("associatedMaterials/recordMaterial/associatedStoneArtefacts");
  Boolean removeChippedStone = true;
  Boolean removeUnmodifiedStone = true;
  Boolean removeGroundStone = true;

  // compare each selected artefact against the stone artefact vocab to determine which one(s) the user selected
  for (selectedItem : assocStones) {
    for (type : associatedStoneArtefactsVocab) {
      if (selectedItem.getName().equals(type.get(0))) {
        executeViewTask(new ViewTask() {
          doTask() {
            if (type.get(1).equals("cs")) {
              Log.d("updateDynamicAssociatedStone", "cs selected");
              String callback = "onEvent(\"associatedMaterials/recordMaterial/chippedStoneArtefacts\", \"click\", \"updateDynamicChippedStone();\");";
              if (!hasView("associatedMaterials/recordMaterial/chippedStoneArtefacts")) {
                makeDynamicVocab("CheckBoxGroup", "associatedMaterials/recordMaterial/chippedStoneArtefacts", "Associated Chipped Stone Artefacts", "{chippedStoneArtefacts}", callback);
              }
              removeChippedStone = false;
            } else if (type.get(1).equals("um")) {
              Log.d("updateDynamicAssociatedStone", "um selected");
              if (!hasView("associatedMaterials/recordMaterial/unmodifiedStone")) {
                makeDynamicVocab("CheckBoxGroup", "associatedMaterials/recordMaterial/unmodifiedStone", "Associated Unmodified Stone", "{unmodifiedStone}");
              }
              removeUnmodifiedStone = false;
            } else if (type.get(1).equals("ground")) {
              Log.d("updateDynamicAssociatedStone", "ground selected");
              if (!hasView("associatedMaterials/recordMaterial/groundStoneType")) {
                makeDynamicVocab("CheckBoxGroup", "associatedMaterials/recordMaterial/groundStoneType", "Ground Stone Types Present", "{groundStoneType}");
              }
              if (!hasView("associatedMaterials/recordMaterial/groundStoneStatus")) {
                makeDynamicVocab("CheckBoxGroup", "associatedMaterials/recordMaterial/groundStoneStatus", "Ground Stone Status", "{groundStoneStatus}");
              }
              removeGroundStone = false;
            } else {
              Log.d("updateDynamicAssociatedStone", "Error: no stone artefact selected");
            }
          }
        });
      }
    }    
  }
  if (removeChippedStone) {
    if (hasView("associatedMaterials/recordMaterial/chippedStoneArtefacts")) {
      removeView("associatedMaterials/recordMaterial/chippedStoneArtefacts");
      if (hasView("associatedMaterials/recordMaterial/retouchedArtefacts")) {
        removeView("associatedMaterials/recordMaterial/retouchedArtefacts");
      }
    }
  }
  if (removeUnmodifiedStone) {
    if (hasView("associatedMaterials/recordMaterial/unmodifiedStone")) {
      removeView("associatedMaterials/recordMaterial/unmodifiedStone");
    }
  }
  if (removeGroundStone) {
    if (hasView("associatedMaterials/recordMaterial/groundStoneType")) {
      removeView("associatedMaterials/recordMaterial/groundStoneType");
    }
    if (hasView("associatedMaterials/recordMaterial/groundStoneStatus")) {
      removeView("associatedMaterials/recordMaterial/groundStoneStatus");
    }
  }
}

/** Displays the associated retouched artefacts view for associated stone artefacts **/
updateDynamicChippedStone() {
  chippedStone = getFieldValue("associatedMaterials/recordMaterial/chippedStoneArtefacts");
  Boolean removeRetouchedArtefacts = true;
  for (selectedItem : chippedStone) {
    for (type : associatedChippedStoneVocab) {
      if (selectedItem.getName().equals(type.get(0))) {
        executeViewTask(new ViewTask(){
          doTask() {
            if (type.get(1).equals("ru")) {
              Log.d("updateDynamicChippedStone", "ru selected");
              if (!hasView("associatedMaterials/recordMaterial/retouchedArtefacts")) {
                makeDynamicVocab("CheckBoxGroup", "associatedMaterials/recordMaterial/retouchedArtefacts", "Associated Retouched Artefacts", "{retouchedArtefacts}");
              }
              removeRetouchedArtefacts = false;
            }
          }
        }); 
      }
    }
  }
  if (removeRetouchedArtefacts) {
    if (hasView("associatedMaterials/recordMaterial/retouchedArtefacts")) {
      removeView("associatedMaterials/recordMaterial/retouchedArtefacts");
    }
  }
}

/** Displays or hides the associated materials tabgroup depending on what cluster is selected. **/
toggleAssociatedMaterials() {
  String boneAndOther = null;
  fetchOne("select vocabid from vocabulary join attributekey using (attributeid) where attributename = 'Cluster' and vocabname = '{boneOnly}';", new FetchCallback() {
    onFetch(result) {
      if (!isNull(result)) {
        boneOnly = result.get(0);
        if (boneOnly.equals(getFieldValue("oldBone/basicIdentification/cluster"))) {
          Log.d("showAssociatedMaterials()", "Hiding associated materials Tab");
          cancelTab("oldBone/associatedMaterials", false);
          toggleClusterType(true);        
        } else {
          Log.d("showAssociatedMaterials()", "Showing associated materials Tab");
          showTab("oldBone/associatedMaterials");
          showTab("oldBone/basicIdentification");
          toggleClusterType(false);
        }
      }
    }
  });
}

/** Populates a global list variable with the contents of a specified vocabulary. **/
populateGlobalVocab(String vocabName, List globalList) {
  fetchAll("select vocabid, vocabname from vocabulary left join attributekey using (attributeid) where attributename = '" + vocabName + "';", new FetchCallback() {
    onFetch(result) {
      for (item : result) {
        List temp = new ArrayList();
        temp.add(item.get(0));
        temp.add(item.get(1));
        globalList.add(temp);
      }
    }
  }); 
}

/** Module Initialisation **/
init() {
  // old bone init
  populateOldBoneAttributes();
  fetchOne("select vocabid from vocabulary join attributekey using (attributeid) where attributename = 'Cluster' and vocabname = '{boneOnly}';", new FetchCallback() {
    onFetch(result) {
      setFieldValue("oldBone/basicIdentification/cluster", result.get(0)); // set the cluster field to be 'Bone Only'
      toggleAssociatedMaterials();
    }
  });
  onEvent("oldBone", "load", "cancelTab(\"oldBone/associatedMaterials\", false);");

  // set the vocab globals
  populateGlobalVocab("Associated in situ material", associatedInsituMaterialVocab);
  populateGlobalVocab("Associated surface material", associatedSurfaceMaterialVocab); 
  populateGlobalVocab("Associated Stone Artefacts", associatedStoneArtefactsVocab); 
  populateGlobalVocab("Associated Chipped Stone Artefacts", associatedChippedStoneVocab);

}

init();